// Copyright 2020,2021 Alexander Isaacson
//
// This file is part of ckproof.
//
// Ckproof is free software: you can redistribute it and/or modify it under the terms of the GNU
// Affero General Public License as published by the Free Software Foundation, either version 3 of
// the License, or (at your option) any later version.
//
// Ckproof is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
// even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License along with ckproof. If
// not, see <https://www.gnu.org/licenses/>.

// TODO: Clean up this file. It's getting very messy.

ident = @{ (LETTER | "_")+ }
var = ${ "'" ~ ident }
tag = ${ "#" ~ tag_contents }
tag_contents = @{ (LETTER | NUMBER | "_")+ }
url = @{ url_valid_char+ }
url_valid_char = {
  ASCII_ALPHANUMERIC | "-" | "." | "_" | "~" | ":" | "/" | "?" | "#" | "[" | "]"
  | "@" | "!" | "$" | "&" | "'" | "(" | ")" | "*" | "+" | "," | ";" | "="
}

integer = @{ ASCII_DIGIT+ }

string = ${ "\"" ~ string_contents ~ "\"" }
string_contents = @{ (!"\"" ~ ANY)* }

citation = !{ "<" ~ "cite" ~ ident ~ "/" ~ ">" }

open_bracket = { "\\text[" }
close_bracket = { "\\text]" }

amp = { "&" }
apos = { "'" }
ldquo = { "``" }
rdquo = { "\"" }
lsquo = { "`" }
rsquo = { "`'" }
ellipsis = { "..." }
separator = { "\\," }

word = @{ (!word_forbidden ~ ANY)+ }
word_forbidden = {
  WHITE_SPACE
  | "[" | "]" | "{" | "}" | "<" | ">"
  | "\\" | "#" | "|"
  | "`" | "'" | "&" | "\"" | "..."
}

inline_math = _{ "\\(" ~ math_row ~ "\\)" }
display_math = { "\\[" ~ math_row ~ display_math_end }
display_math_end = ${ "\\]" ~ math_punct }
math_punct = @{ PUNCTUATION* }

math_row = !{ math_item* }
math_item = _{
  math_fenced | big_operator | display_operator
  | var | ident | integer
  | math_row_punct
}
math_row_punct = _{ ellipsis | separator }
math_fenced = _{ "(" ~ math_row ~ ")" }

big_operator = {
  "\\" ~ big_operator_kind ~ "{"
    ~ math_row ~ ("," ~ math_row)* ~ ","?
  ~ "}"
}

big_operator_kind = _{ operator_sqrt | operator_pow }
operator_sqrt = { "sqrt" }
operator_pow = { "pow" }

formula = {
  prefix_list? ~ primary ~ (read_operator ~ prefix_list? ~ primary)*
}
prefix_list = { read_operator* }

primary = _{ ident | var | primary_paren }
primary_paren = { "(" ~ formula ~ ")" }

read_operator = { read_operator_silent }
read_operator_silent = _{
  operator_negation | operator_equiv | operator_implies
  | operator_and | operator_or
  | operator_plus | operator_minus | operator_asterisk | operator_slash
  | operator_lt | operator_eq | operator_gt | operator_twiddle
}
operator_plus = { "+" }
operator_minus = { "-" }
operator_asterisk = { "*" }
operator_slash = { "/" }
operator_negation = { "!" }
operator_equiv = { "<->" }
operator_implies = { "->" }
operator_and = { "&" }
operator_or = { "|" }
operator_lt = { "<" }
operator_eq = { "=" }
operator_gt = { ">" }
operator_twiddle = { "~" }

display_operator = { display_operator_silent }
display_operator_silent = _{ read_operator_silent | operator_bang }
operator_bang = { "\\bang" }

paragraph = ${
  text_element ~ (text_whitespace? ~ text_element)* ~ text_linebreak?
}
text_element = _{
  text_reference | inline_math | citation
  | unicorn_vomit_begin | unicorn_vomit_end
  | em_begin | em_end
  | unformatted_element
}

text_reference = { text_reference_full | text_reference_void }
text_reference_full = !{
  "<" ~ "ref" ~ (tag | fqid | ident) ~ ">"
  ~ bare_text
  ~ "<" ~ "/" ~ "ref" ~ ">"
}
text_reference_void = !{ "<" ~ "ref" ~ (tag | fqid | ident) ~ "/" ~ ">" }
fqid = { ident ~ "." ~ ident }

unicorn_vomit_begin = { "<" ~ "unicorn" ~ ">" }
unicorn_vomit_end = { "<" ~ "/" ~ "unicorn" ~ ">" }
em_begin = { "<" ~ "em" ~ ">" }
em_end = { "<" ~ "/" ~ "em" ~ ">" }

// Any sequence of whitespace which contains at most one newline.
text_whitespace = { (
  !("\n" ~ (!"\n" ~ WHITE_SPACE)* ~ "\n")
  ~ WHITE_SPACE
)+ }

// Any sequence of whitespace which contains more than one newline. Is used to
// mark the end of a paragraph.
text_linebreak = _{
  text_whitespace? ~ "\n" ~ (!"\n" ~ WHITE_SPACE)* ~ "\n" ~ WHITE_SPACE*
}

// One single paragraph, even if the whitespace would otherwise be considered
// line breaks.
oneline = ${ text_element ~ (oneline_whitespace? ~ text_element)* }
oneline_whitespace = { WHITE_SPACE+ }

bare_element = _{
  open_bracket | close_bracket
  | amp | apos | ldquo | rdquo | lsquo | rsquo | ellipsis | word
}
bare_text = ${
  bare_element ~ (bare_whitespace? ~ bare_element)*
}
bare_whitespace = { WHITE_SPACE+ }

unformatted_element = _{
  hyperlink | bare_element
}
hyperlink = ${
  "<" ~ WHITESPACE* ~ "a" ~ WHITESPACE+ ~ url ~ WHITESPACE* ~ ">"
    ~ WHITESPACE* ~ bare_text
  ~ WHITESPACE* ~ "<" ~ WHITESPACE* ~ "/" ~ WHITESPACE* ~ "a" ~ WHITESPACE* ~ ">"
}
unformatted = ${
  unformatted_element ~ (oneline_whitespace? ~ unformatted_element)*
}

subheading = ${
  heading_level ~ heading_whitespace_silent?
  ~ unformatted_element ~ (heading_whitespace? ~ unformatted_element)*
}
heading_level = _{ heading_l3 | heading_l2 | heading_l1 }
heading_l1 = { "#" }
heading_l2 = { "##" }
heading_l3 = { "###" }
heading_whitespace = { heading_whitespace_silent+ }
heading_whitespace_silent = _{ !"\n" ~ WHITE_SPACE }

type_signature = { type_signature_item ~ ("->" ~ type_signature_item)* }
type_signature_item = _{
  ident | type_signature_nested
}
type_signature_nested = _{ "(" ~ type_signature ~ ")" }

flag_list = {
  "["
    ~ flag ~ ("," ~ flag)* ~ ","?
  ~ "]"
}
flag = _{ flag_reflexive | flag_symmetric | flag_transitive | flag_function }

flag_reflexive = { "reflexive" }
flag_symmetric = { "symmetric" }
flag_transitive = { "transitive" }
flag_function = { "function" }

var_declaration = { ident ~ ":" ~ type_signature }

read = { read_style ~ read_operator }
display = { display_style ~ display_operator_silent }
read_style = _{ style_prefix | style_infix }
display_style = _{ style_prefix | style_infix | style_suffix | style_standard }

style_prefix = { "Prefix" }
style_infix = { "Infix" }
style_suffix = { "Suffix" }
style_standard = { "Standard" }

block_name = { "name" ~ "=" ~ string }
block_tagline = { "tagline" ~ "=" ~ "{" ~ oneline ~ "}" }
block_description = {
  "description" ~ "=" ~ "{"
    ~ text_block*
  ~ "}"
}
block_inputs = {
  "inputs" ~ "=" ~ "["
    ~ var_declaration ~ ("," ~ var_declaration) ~ ","?
  ~ "]"
}
block_type_signature = { "type" ~ "=" ~ type_signature }
block_flags = { "flags" ~ "=" ~ flag_list }
block_var_declaration = _{ "var" ~ var_declaration }
block_read = { "read" ~ "=" ~ read }
block_display = { "display" ~ "=" ~ display }

premise = { "premise" ~ "=" ~ "[" ~ (formula ~ ";")* ~ "]" }
assertion = { "assertion" ~ "=" ~ formula ~ ";" }
expanded = { "expanded" ~ "=" ~ formula ~ ";" }

system_block = {
  "\\System" ~ ident ~ "{"
    ~ system_entry*
  ~ "}"
}
system_entry = _{ block_name | block_tagline | block_description }

type_block = {
  "\\Type" ~ ident ~ ":" ~ ident ~ "{"
    ~ type_entry*
  ~ "}"
}
type_entry = _{ block_name | block_tagline | block_description }

symbol_block = {
  "\\Symbol" ~ ident ~ ":" ~ ident ~ "{"
    ~ symbol_entry*
  ~ "}"
}
symbol_entry = _{
  block_name | block_tagline | block_description
  | block_type_signature | block_read | block_display
}

definition_block = {
  "\\Definition" ~ ident ~ ":" ~ ident ~ "{"
    ~ definition_entry*
  ~ "}"
}
definition_entry = _{
  block_name | block_tagline | block_description
  | block_inputs | block_read | block_display | expanded
}

axiom_block = {
  "\\Axiom" ~ ident ~ ":" ~ ident ~ "{"
    ~ axiom_entry*
  ~ "}"
}
axiom_entry = _{
  block_name | block_tagline | block_description
  | block_flags | block_var_declaration | premise | assertion
}

theorem_block = {
  theorem_head ~ ident ~ ":" ~ ident ~ "{"
    ~ theorem_entry*
  ~ "}"
}

theorem_head = ${ "\\" ~ theorem_kind }
theorem_kind = _{ theorem_lemma | theorem_theorem | theorem_example }
theorem_lemma = { "Lemma" }
theorem_theorem = { "Theorem" }
theorem_example = { "Example" }

theorem_entry = _{
  block_name | block_tagline | block_description
  | block_flags | block_var_declaration | premise | assertion
}

proof_block = {
  "\\Proof" ~ ident ~ ":" ~ ident ~ "{"
    ~ proof_element*
  ~ "}"
}
proof_element = _{
  proof_step | text_block
}
proof_step = {
  "|" ~ proof_meta ~ "|" ~ formula ~ proof_step_end
}
proof_meta = { proof_meta_item ~ ("," ~ proof_meta_item)* ~ ","? }
proof_meta_item = _{ proof_justification | integer | tag }
proof_step_end = ${ ";" ~ math_punct }

proof_justification = { macro_justification | ident }
macro_justification = ${ "!" ~ macro_justification_kind }
macro_justification_kind = _{
  macro_justification_by_definition | macro_justification_by_function_application
}
macro_justification_by_definition = { "def" }
macro_justification_by_function_application = { "fun" }

list_item = _{
  "<" ~ "li" ~ ">"
    ~ oneline
  ~ "<" ~ "/" ~ "li" ~ ">"
}

ol_block = {
  "<" ~ "ol" ~ ">"
    ~ list_item*
  ~ "<" ~ "/" ~ "ol" ~ ">"
}

ul_block = {
  "<" ~ "ul" ~ ">"
    ~ list_item*
  ~ "<" ~ "/" ~ "ul" ~ ">"
}

table_head = { "<" ~ "head" ~ ">" ~ table_row* ~ "<" ~ "/" ~ "head" ~ ">" }
table_body = { "<" ~ "body" ~ ">" ~ table_row* ~ "<" ~ "/" ~ "body" ~ ">" }
table_foot = { "<" ~ "foot" ~ ">" ~ table_row* ~ "<" ~ "/" ~ "foot" ~ ">" }

table_row = { "<" ~ "row" ~ ">" ~ table_cell* ~ "<" ~ "/" ~ "row" ~ ">" }
table_cell = _{ "<" ~ "cell" ~ ">" ~ oneline ~ "<" ~ "/" ~ "cell" ~ ">" }

table_caption = {
  "<" ~ "caption" ~ ">" ~ oneline ~ "<" ~ "/" ~ "caption" ~ ">"
}

table_block = {
  "<" ~ "table" ~ ">"
    ~ table_head?
    ~ table_body?
    ~ table_foot?
    ~ table_caption?
  ~ "<" ~ "/" ~ "table" ~ ">"
}

quote_original = {
  "<" ~ "original" ~ ident ~ ">"
    ~ unformatted
  ~ "<" ~ "/" ~ "original" ~ ">"
}

quote_value = {
  "<" ~ "value" ~ ident ~ ">"
    ~ unformatted
  ~ "<" ~ "/" ~ "value" ~ ">"
}

quote_block = {
  "<" ~ "quote" ~ ">"
    ~ quote_original?
    ~ quote_value
  ~ "<" ~ "/" ~ "quote" ~ ">"
}

todo_block = {
  "<" ~ "todo" ~ ">"
    ~ text_block*
  ~ "<" ~ "/" ~ "todo" ~ ">"
}

raw_citation = {
  "<" ~ "raw_citation" ~ ">"
    ~ raw_citation_entry*
  ~ "<" ~ "/" ~ "raw_citation" ~ ">"
}
raw_citation_entry = _{
  raw_citation_authors | raw_citation_title | raw_citation_container
}
raw_citation_authors = {
  "authors" ~ "=" ~ "{" ~ unformatted ~ "}"
}
raw_citation_title = {
  "title" ~ "=" ~ "{" ~ unformatted ~ "}"
}
raw_citation_container = {
  "container" ~ "{"
    ~ raw_citation_container_entry*
  ~ "}"
}
raw_citation_container_entry = _{
  raw_citation_container_title | raw_citation_other_contributors | raw_citation_version | raw_citation_number
  | raw_citation_publisher | raw_citation_publication_date | raw_citation_location
}
raw_citation_container_title = {
  "container_title" ~ "=" ~ "{" ~ unformatted ~ "}"
}
raw_citation_other_contributors = {
  "other_contributors" ~ "=" ~ "{" ~ unformatted ~ "}"
}
raw_citation_version= {
  "version" ~ "=" ~ "{" ~ unformatted ~ "}"
}
raw_citation_number = {
  "number" ~ "=" ~ "{" ~ unformatted ~ "}"
}
raw_citation_publisher = {
  "publisher" ~ "=" ~ "{" ~ unformatted ~ "}"
}
raw_citation_publication_date = {
  "publication_date" ~ "=" ~ "{" ~ unformatted ~ "}"
}
raw_citation_location = {
  "location" ~ "=" ~ "{" ~ unformatted ~ "}"
}

sublist_item = {
  var ~ ">>>" ~ math_row ~ ";"
}

sublist = {
  "<" ~ "sublist" ~ ">"
    ~ sublist_item*
  ~ "<" ~ "/" ~ "sublist" ~ ">"
}

heading_block = { subheading+ }
text_block = { raw_citation | sublist | display_math | paragraph }

document = { SOI ~ document_block* ~ EOI }
document_block = _{
  system_block | type_block | symbol_block | definition_block
  | axiom_block | theorem_block | proof_block
  | ul_block | ol_block | table_block | quote_block | heading_block | todo_block
  | text_block
}

manifest = { SOI ~ manifest_book* ~ EOI }
manifest_book = {
  ident ~ ":" ~ string ~ "{"
    ~ oneline
    ~ "[" ~ manifest_chapter* ~ "]"
  ~ "}"
}
manifest_chapter = {
  ident ~ ":" ~ string ~ "{"
    ~ oneline
    ~ "[" ~ manifest_page* ~ "]"
  ~ "}"
}
manifest_page = { ident ~ ":" ~ string ~ "," }

bib = { SOI ~ bib_entry* ~ EOI }
bib_entry = {
  ident ~ "{"
    ~ raw_citation_entry*
  ~ "}"
}

WHITESPACE = _{ WHITE_SPACE }
